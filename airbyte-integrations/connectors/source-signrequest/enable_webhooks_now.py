"""
This monstrosity of a script was created to enable webhooks across all the Signrequest teams
at Infinit-O Manila.

Context:
The Signrequest API has an `events/` endpoint that produces a stream of "events" that occur whenever
specific actions are taken on the Signrequest platform - things like when documents are
created, sent, signed, rejected, etc.

However, these events are not automatically generated by the Signrequest platform. They require that
a webhook be enabled in order to see them.

Webhooks each cover only a single type of event and must be enabled one-at-a-time because there is
no unified web interface that covers the whole organization.

Solution:
This script is designed to take in a JSON file containing credentials and URLs for each of the teams
here at IOM, and send POST requests en-masse to enable webhooks for each of the teams, such that
a rich event stream is generated for each of them.

There are 10 teams at IOM that use Signrequest and have URLs.

There are 7 event types we need to watch. They are as follows:
["sending_error", "sent" ,"declined", "cancelled", "signed", "signer_signed", "signer_email_bounced"]

A total of 70 post requests need to be sent to enable webhooks for all teams, and all types.
"""
import argparse
import json
from urllib.parse import urljoin
from copy import deepcopy

import requests

ap = argparse.ArgumentParser()
ap.add_argument("credfile", help="relative path to the credentials file.")
ap.add_argument("outfile", help="relative path to where you want the output file stored.")

args = ap.parse_args()

def prep_request(request: dict, event_type: str) -> dict:
    API_WEBHOOK = "/api/v1/webhooks/"
    CALLBACK_URL = "https://http-trigger-v1-automation.infinit.services/0e0f198e-44cb-452b-9de8-d9867cbfe564-242"

    operating_copy = deepcopy(request)
    operating_copy["target_url"] = urljoin(operating_copy["url_base"], API_WEBHOOK)
    operating_copy["headers"] = {
        "Authorization": f"Token {operating_copy['access_token']}"
    }
    operating_copy["body"] = {
        "event_type": event_type,
        "callback_url": CALLBACK_URL
    }

    return operating_copy

def send_request(request_data: dict) -> dict:
    target = request_data["target_url"]
    body = request_data["body"]
    headers = request_data["headers"]
    print(f"Sending to: {target}, {body}, {headers}")
    resp = requests.post(url=target, json=body, headers=headers)
    resp.raise_for_status()
    return {
        'status': resp.status_code,
        'body': resp.json()
    }


if __name__ == "__main__":
    EVENT_TYPES = [
        "sending_error",
        "sent",
        "declined",
        "cancelled",
        "signed",
        "signer_signed",
        "signer_email_bounced"
    ]
    print("Opening credfile...")
    with open(args.credfile, "r") as F:
        cred_data: list[dict] = json.loads(F.read())

    print("Preparing requests...")
    prepared_requests = [prep_request(x, y) for x in cred_data for y in EVENT_TYPES]

    print("Sending requests...")
    responses = [send_request(x) for x in prepared_requests]

    print("Writing responses...")    
    with open(args.outfile, "w") as F:
        F.write(json.dumps(responses))

    print("Done!")
